{
    "bot_name": "Monitize bot",
    "commands": [
        {
            "command": "\/start",
            "answer": null,
            "is_public": 0,
            "wait_for_answer": null,
            "alias": null,
            "help": null,
            "keyboards": null,
            "chat_type": null,
            "placeholder": null,
            "code": "$api_key = \"d2fHIShxrX3J52KyvpV\";\r\n$amount = 100;\r\n$currency = Bot::getProperty('currency') ?? \"BDT\";\r\n$callback_url = Bot::getPublicCommandUrl('activate_callback');\r\n\r\n$refer_link = Bot::getBotLink() . '?start=' . $chatId;\r\n$balance = $User->getProperty('balance') ?? 0;\r\n$active_status = $User->getProperty('active_status') ?? 0;\r\n\r\n$messageText = \"\ud83d\udc4b *Welcome to the Bot!*\\n\\n\" .\r\n\"\ud83d\udcb0 *Your Current Balance:* `$balance` $currency\\n\\n\" .\r\n\"\ud83c\udf81 *Want to earn more? Invite your friends!*\\n\" .\r\n\"\ud83d\udd17 *Your Referral Link:*\\n`$refer_link`\\n\\n\" .\r\n\"\ud83d\udce4 *Click the button below to share your referral link and start earning!*\\n\\n\" .\r\n\"\ud83d\udd0d *To see the list of users you have referred, type \/refers*\";\r\n\r\n$reply_markup = [\r\n    'inline_keyboard' => [],\r\n    'resize_keyboard' => true\r\n];\r\n\r\nif (!$active_status) {\r\n    $url = 'https:\/\/tzsmmpay.com\/api\/payment\/create';\r\n\r\n    $data = [\r\n        'api_key' => $api_key,\r\n        'cus_name' => $TGUser['first_name'] ?? 'User',\r\n        'cus_email' => $User->getProperty('email') ?? 'demo@demo.com',\r\n        'cus_number' => $User->getProperty('number') ?? '017000000',\r\n        'success_url' => Bot::getBotLink(),\r\n        'cancel_url' => Bot::getBotLink(),\r\n        'callback_url' => $callback_url,\r\n        'amount' => $amount,\r\n        'currency' => $currency,\r\n    ];\r\n\r\n    $ch = curl_init($url);\r\n    curl_setopt_array($ch, [\r\n        CURLOPT_POST => true,\r\n        CURLOPT_POSTFIELDS => http_build_query($data),\r\n        CURLOPT_HTTPHEADER => ['Content-Type: application\/x-www-form-urlencoded'],\r\n        CURLOPT_RETURNTRANSFER => true,\r\n        CURLOPT_TIMEOUT => 30,\r\n    ]);\r\n\r\n    $response = curl_exec($ch);\r\n\r\n    if ($response === false) {\r\n        $error = curl_error($ch);\r\n        curl_close($ch);\r\n        Bot::sendMessage($chatId, '\u274c Payment request failed: ' . $error, 'Markdown');\r\n        return;\r\n    }\r\n\r\n    curl_close($ch);\r\n\r\n    $responseData = json_decode($response, true);\r\n\r\n    if (!empty($responseData['payment_url'])) {\r\n        $trx_id = $responseData['trx_id'];\r\n\r\n        $new_addfund = [\r\n            'chat_id' => $chatId,\r\n            'trx_id' => $trx_id,\r\n            'amount' => $amount,\r\n            'status' => 'Pending',\r\n            'type' => 'Activate',\r\n            'method' => 'TZSMM Pay',\r\n            'time' => now(),\r\n        ];\r\n        $result = BotDB::append('addfunds', $new_addfund);\r\n\r\n        if (!$result['ok']) {\r\n            Bot::sendMessage($chatId, '\u274c Failed to save payment request. Please try again or contact support.', 'Markdown');\r\n            return;\r\n        }\r\n\r\n        $reply_markup['inline_keyboard'][] = [\r\n            ['text' => '\ud83d\udfe2 Activate Account', 'url' => $responseData['payment_url']]\r\n        ];\r\n    } else {\r\n        $error_message = $responseData['messages'] ?? 'Unknown error';\r\n        Bot::sendMessage($chatId, \"\u274c Failed to initiate payment: $error_message. Please try again later.\", 'Markdown');\r\n        return;\r\n    }\r\n\r\n    $messageText = \"\ud83d\udeab *Your account is not yet activated.*\\n\" .\r\n    \"\ud83e\uddfe To use all features and earn from referrals, you need to *activate your account* by paying $amount $currency.\\n\\n\" .\r\n    \"\u2705 Tap the *Activate Account* button below to complete activation.\";\r\n} else {\r\n    $reply_markup['inline_keyboard'][] = [\r\n        ['text' => '\ud83c\udfe0 Home', 'callback_data' => '\/start'],\r\n        ['text' => '\ud83d\udcb8 Withdraw', 'callback_data' => '\/withdraw']\r\n    ];\r\n    $reply_markup['inline_keyboard'][] = [\r\n        ['text' => '\ud83d\udcdc Withdraw History', 'callback_data' => '\/withdraws'],\r\n        ['text' => '\ud83d\udc65 Refers', 'callback_data' => '\/refers']\r\n    ];\r\n    $reply_markup['inline_keyboard'][] = [\r\n        ['text' => '\ud83d\udcf2 Share Your Link', 'url' => \"https:\/\/t.me\/share\/url?url=$refer_link\"]\r\n    ];\r\n}\r\n\r\nBotAPI::sendMessage([\r\n    'chat_id' => $chatId,\r\n    'text' => $messageText,\r\n    'parse_mode' => 'Markdown',\r\n    'disable_web_page_preview' => true,\r\n    'reply_markup' => json_encode($reply_markup, JSON_UNESCAPED_SLASHES)\r\n]);"
        },
        {
            "command": "*",
            "answer": null,
            "is_public": 0,
            "wait_for_answer": null,
            "alias": null,
            "help": null,
            "keyboards": null,
            "chat_type": null,
            "placeholder": null,
            "code": "if (strpos($message, \"\/start\") === 0) {\r\n    $refer_bonus = Bot::getProperty('refer_bonus') ?? 5;\r\n\r\n    if ($User->getProperty('referer')) {\r\n        $User->runCommand('\/start');\r\n        return;\r\n    }\r\n\r\n    $params = explode(\" \", $message);\r\n    $ref_code = isset($params[1]) ? $params[1] : null;\r\n\r\n    if ($ref_code) {\r\n        $referer = Bot::getUser($ref_code);\r\n\r\n        if (!$referer) {\r\n            BotAPI::sendMessage([\r\n                'chat_id' => $chatId,\r\n                'text' => \"\u274c *Invalid referral code.*\",\r\n                'parse_mode' => 'Markdown'\r\n            ]);\r\n        } else {\r\n            $User->setProperty('referer', $ref_code);\r\n\r\n            \/\/ $referer_balance = $referer->getProperty('balance') ?? 0;\r\n            \/\/ $referer->setProperty('balance', $referer_balance + $refer_bonus);\r\n\r\n            \/\/ $full_name = trim($TGUser['first_name'] . ' ' . ($TGUser['last_name'] ?? ''));\r\n            \/\/ $username = $TGUser['username'] ?? 'N\/A';\r\n\r\n            \/\/ BotAPI::sendMessage([\r\n            \/\/     'chat_id' => $referer->chat_id,\r\n            \/\/     'text' => \"\ud83c\udf89 *$full_name* ( @$username ) joined using your referral link!\\n\\n\ud83d\udcb0 You earned *$refer_bonus* points!\",\r\n            \/\/     'parse_mode' => 'Markdown'\r\n            \/\/ ]);\r\n\r\n            BotAPI::sendMessage([\r\n                'chat_id' => $chatId,\r\n                'text' => \"\u2705 *Referral code accepted!*\\nYou were referred by: `$ref_code`\",\r\n                'parse_mode' => 'Markdown'\r\n            ]);\r\n        }\r\n    }\r\n\r\n    $User->runCommand('\/start');\r\n\r\n    return;\r\n}\r\n\r\n\r\n$active_status = $User->getProperty('active_status') ?? 0;\r\nif (!$active_status) {\r\n    $User->runCommand('\/start');\r\n}"
        },
        {
            "command": "\/refers",
            "answer": null,
            "is_public": 0,
            "wait_for_answer": null,
            "alias": null,
            "help": null,
            "keyboards": null,
            "chat_type": null,
            "placeholder": null,
            "code": "$active_status = $User->getProperty('active_status') ?? 0;\r\n\r\n\/\/ Redirect inactive users to \/start with a message\r\nif (!$active_status) {\r\n    Bot::sendMessage($chatId, \"\ud83d\udeab *Your account is not activated.*\\nPlease activate your account to view your referrals.\", 'Markdown');\r\n    $User->runCommand('\/start');\r\n    return;\r\n}\r\n\r\n\/\/ Fetch users referred by the current user\r\n$users = Bot::getAllUser()->filter(function ($user) use ($chatId) {\r\n    return $user->getProperty('referer') == $chatId;\r\n});\r\n\r\n$count = $users->count();\r\n\r\nif ($count === 0) {\r\n    $text = \"\ud83d\udc65 *You haven't referred anyone yet.*\\n\\n\ud83d\udca1 Share your referral link to start earning!\";\r\n} else {\r\n    $text = \"\ud83d\udc65 *You have referred $count user(s):*\\n\\n\";\r\n    foreach ($users as $index => $user) {\r\n        $full_name = trim(($user->data['first_name'] ?? '') . ' ' . ($user->data['last_name'] ?? ''));\r\n        $username = $user->data['username'] ?? 'N\/A';\r\n\r\n        $escaped_name = escapeMarkdown($full_name);\r\n        $escaped_username = escapeMarkdown($username);\r\n        $active_status = $user->getProperty('active_status') ?? 0;\r\n\r\n        \/\/ Escape Markdown special characters\r\n        $escaped_name = escapeMarkdown($full_name);\r\n        $escaped_username = escapeMarkdown($username);\r\n\r\n        \/\/ Determine activation status\r\n        $status_text = $active_status ? \"\u2705 Activated\" : \"\u274c Not Activated\";\r\n\r\n        \/\/ Format the referral entry\r\n        $text .= ($index + 1) . \". *$escaped_name* (@$escaped_username)\\n\";\r\n        $text .= \"   $status_text\\n\";\r\n        $text .= \"------------------------\\n\";\r\n    }\r\n}\r\n\r\nBotAPI::sendMessage([\r\n    'chat_id' => $chatId,\r\n    'text' => $text,\r\n    'parse_mode' => 'Markdown',\r\n    'disable_web_page_preview' => true\r\n]);\r\n\r\nfunction escapeMarkdown($text) {\r\n    $special_chars = ['_',\r\n        '*',\r\n        '[',\r\n        ']',\r\n        '(',\r\n        ')',\r\n        '~',\r\n        '`',\r\n        '>',\r\n        '#',\r\n        '+',\r\n        '-',\r\n        '=',\r\n        '|',\r\n        '{',\r\n        '}',\r\n        '.',\r\n        '!'];\r\n    foreach ($special_chars as $char) {\r\n        $text = str_replace($char, '\\\\' . $char, $text);\r\n    }\r\n    return $text;\r\n}"
        },
        {
            "command": "activate_callback",
            "answer": null,
            "is_public": 1,
            "wait_for_answer": null,
            "alias": null,
            "help": null,
            "keyboards": null,
            "chat_type": null,
            "placeholder": null,
            "code": "$api_key = \"Jyz1xq2THDA0Ieqrgm\";\r\n$currency = Bot::getProperty('currency') ?? \"BDT\";\r\n$refer_bonus = Bot::getProperty('refer_bonus') ?? 10;\r\n$required_fields = ['amount', 'cus_name', 'cus_email', 'cus_number', 'trx_id', 'status'];\r\n$errors = [];\r\n\r\nforeach ($required_fields as $field) {\r\n    if (!isset($request[$field]) || empty($request[$field])) {\r\n        $errors[] = ucfirst($field) . ' is required';\r\n    }\r\n}\r\nif (isset($request['amount']) && !is_numeric($request['amount'])) {\r\n    $errors[] = 'Please enter a valid numeric amount';\r\n}\r\n\r\nif (isset($request['cus_email']) && !filter_var($request['cus_email'], FILTER_VALIDATE_EMAIL)) {\r\n    $errors[] = 'Please provide a valid email address';\r\n}\r\n\r\nif (isset($request['extra']) && !is_array($request['extra'])) {\r\n    $errors[] = 'Extra data must be in array format';\r\n}\r\n\r\n$trx_id = $request['trx_id'] ?? null;\r\n\r\nif (!empty($errors)) {\r\n    if (isset($chatId) && $chatId) {\r\n        Bot::sendMessage($chatId, 'Oops! Something went wrong: ' . implode(', ', $errors));\r\n    }\r\n    return [\r\n        'success' => false,\r\n        'messages' => implode(', ', $errors),\r\n    ];\r\n}\r\n\r\nif (!$trx_id) {\r\n    if (isset($chatId) && $chatId) {\r\n        Bot::sendMessage($chatId, 'We couldn\u2019t find a Transaction ID. Please provide a valid one.');\r\n    }\r\n    return [\r\n        'success' => false,\r\n        'messages' => 'Transaction ID is missing',\r\n    ];\r\n}\r\n\r\n$result = BotDB::query(\r\n    'SELECT * FROM addfunds WHERE json_extract(data, \"$.trx_id\") = :trx_id LIMIT 1',\r\n    [':trx_id' => $trx_id]\r\n);\r\n\r\nif (!$result['ok'] || !isset($result['data']) || empty($result['data'])) {\r\n    if (isset($chatId) && $chatId) {\r\n        Bot::sendMessage($chatId, 'Sorry, we couldn\u2019t find this transaction. Please try again or contact support.');\r\n    }\r\n    return [\r\n        'success' => false,\r\n        'messages' => 'Database error or no record found: ' . ($result['error'] ?? 'Unknown error'),\r\n    ];\r\n}\r\n\r\n$addfund = json_decode($result['data'][0]['data'], true);\r\n\r\nif (!$addfund || !is_array($addfund)) {\r\n    if (isset($chatId) && $chatId) {\r\n        Bot::sendMessage($chatId, 'There\u2019s an issue with the transaction data. Please contact our support team.');\r\n    }\r\n    return [\r\n        'success' => false,\r\n        'messages' => 'Invalid transaction record format',\r\n    ];\r\n}\r\n\r\nif (!isset($addfund['status']) || $addfund['status'] === 'Completed') {\r\n    if (isset($chatId) && $chatId) {\r\n        Bot::sendMessage($chatId, 'This transaction has already been processed.');\r\n    }\r\n    return [\r\n        'success' => false,\r\n        'messages' => 'Transaction already used',\r\n    ];\r\n}\r\n\r\n$chatId = $addfund['chat_id'] ?? null;\r\nif (!$chatId) {\r\n    return [\r\n        'success' => false,\r\n        'messages' => 'Invalid chat ID in transaction record',\r\n    ];\r\n}\r\n\r\n$user = Bot::getUser($chatId);\r\n\r\nif (!$user) {\r\n    Bot::sendMessage($chatId, 'We couldn\u2019t find your account. Please reach out to support for assistance.');\r\n    return [\r\n        'success' => false,\r\n        'messages' => 'User not found',\r\n    ];\r\n}\r\n\r\n$verify_url = 'https:\/\/tzsmmpay.com\/api\/payment\/verify';\r\n$verify_data = [\r\n    'trx_id' => $trx_id,\r\n    'api_key' => $api_key,\r\n];\r\n\r\n$ch = curl_init($verify_url);\r\ncurl_setopt_array($ch, [\r\n    CURLOPT_POST => true,\r\n    CURLOPT_POSTFIELDS => http_build_query($verify_data),\r\n    CURLOPT_HTTPHEADER => [\r\n        'Accept: application\/json',\r\n        'Content-Type: application\/x-www-form-urlencoded',\r\n    ],\r\n    CURLOPT_RETURNTRANSFER => true,\r\n    CURLOPT_TIMEOUT => 30,\r\n]);\r\n\r\n$response = curl_exec($ch);\r\n\r\nif ($response === false) {\r\n    $error = curl_error($ch);\r\n    curl_close($ch);\r\n    Bot::sendMessage($chatId, 'We\u2019re having trouble verifying your payment. Please try again later or contact support.');\r\n    return [\r\n        'success' => false,\r\n        'messages' => 'Verification failed: ' . $error,\r\n    ];\r\n}\r\n\r\ncurl_close($ch);\r\n\r\n$responseData = json_decode($response, true);\r\n\r\nif ($responseData === null) {\r\n    Bot::sendMessage($chatId, 'We received an invalid response from the payment gateway. Please try again or contact support.');\r\n    return [\r\n        'success' => false,\r\n        'messages' => 'Invalid verification response',\r\n    ];\r\n}\r\n\r\nif ($responseData['success'] && $request['status'] === 'Completed') {\r\n    $balance = (float) ($user->getProperty('balance') ?? 0);\r\n    $amount = (float) ($addfund['amount'] ?? 0);\r\n\r\n    if ($amount <= 0) {\r\n        Bot::sendMessage($chatId, 'The transaction amount is invalid. Please check and try again.');\r\n        return [\r\n            'success' => false,\r\n            'messages' => 'Invalid transaction amount',\r\n        ];\r\n    }\r\n\r\n    $user->setProperty('active_status', true);\r\n    $referer = Bot::getUser($user->getProperty('referer'));\r\n    if ($referer) {\r\n        $referer_balance = $referer->getProperty('balance') ?? 0;\r\n        $referer->setProperty('balance', $referer_balance + $refer_bonus);\r\n        $full_name = trim($user['data']['first_name'] . ' ' . ($user['data']['last_name'] ?? ''));\r\n        $username = $user['data']['username'] ?? 'N\/A';\r\n\r\n        BotAPI::sendMessage([\r\n            'chat_id' => $referer->chat_id,\r\n            'text' => \"\ud83c\udf89 Great news! *$full_name* ( @$username ) activated their account using your referral link!\\n\\n\ud83d\udcb0 You\u2019ve earned *$refer_bonus* $currency! Keep sharing to earn more!\",\r\n            'parse_mode' => 'Markdown'\r\n        ]);\r\n    }\r\n\r\n    $updatedData = array_merge($addfund, ['status' => 'Completed']);\r\n    $updateResult = BotDB::query(\r\n        'UPDATE addfunds SET data = :data WHERE json_extract(data, \"$.trx_id\") = :trx_id',\r\n        [':data' => json_encode($updatedData), ':trx_id' => $trx_id]\r\n    );\r\n\r\n    if (!$updateResult['ok']) {\r\n        Bot::sendMessage($chatId, 'We couldn\u2019t update your transaction status. Please contact support for help.');\r\n        return [\r\n            'success' => false,\r\n            'messages' => 'Failed to update transaction status: ' . ($updateResult['error'] ?? 'Unknown error'),\r\n        ];\r\n    }\r\n\r\n    Bot::sendMessage($chatId, \"\ud83c\udf89 Your account has been activated successfully!\\n\\n**Amount**: `$amount` $currency\\n**Transaction ID**: `$trx_id`\\n\\nWelcome aboard! Start exploring now!\", 'Markdown');\r\n\r\n    return [\r\n        'success' => true,\r\n        'messages' => 'Account activated successfully',\r\n    ];\r\n} else {\r\n    $errorMessage = $responseData['message'] ?? 'We couldn\u2019t verify your payment. Please try again.';\r\n    Bot::sendMessage($chatId, \"\u274c Payment verification failed: $errorMessage\");\r\n    return [\r\n        'success' => false,\r\n        'messages' => $errorMessage,\r\n    ];\r\n}"
        },
        {
            "command": "\/transactions",
            "answer": null,
            "is_public": 0,
            "wait_for_answer": null,
            "alias": null,
            "help": null,
            "keyboards": null,
            "chat_type": null,
            "placeholder": null,
            "code": "$result = BotDB::query(\r\n    'SELECT * FROM addfunds WHERE json_extract(data, \"$.chat_id\") = :user_id ORDER BY json_extract(data, \"$.time\") DESC',\r\n    [':user_id' => $chatId]\r\n);\r\n\r\nif ($result['ok']) {\r\n    $addfunds = $result['data'];\r\n\r\n    if (empty($addfunds)) {\r\n        Bot::sendMessage($chatId, \"\u274c You haven't made any deposits yet.\");\r\n        return;\r\n    }\r\n\r\n    $message = \"\ud83d\udce5 *Your Deposit History:*\\n\\n\";\r\n    \r\n    foreach ($addfunds as $addfund) {\r\n        $data = json_decode($addfund['data'], true); \r\n\r\n        $trx_id = $data['trx_id'] ?? 'Unknown';\r\n        $method = $data['method'] ?? 'N\/A';\r\n        $status = $data['status'] ?? 'Pending';\r\n        $amount = $data['amount'] ?? '0';\r\n        $time = $data['time'] ?? 'Unknown';\r\n\r\n        $message .= \"\ud83d\udd39 *Transaction ID:* `$trx_id`\\n\";\r\n        $message .= \"\ud83d\udcb3 *Method:* $method\\n\";\r\n        $message .= \"\ud83d\udcb0 *Amount:* $amount\\n\";\r\n        $message .= \"\ud83d\udccc *Status:* $status\\n\";\r\n        $message .= \"\ud83d\udd52 *Time:* $time\\n\";\r\n        $message .= \"------------------------\\n\";\r\n    }\r\n\r\n    Bot::sendMessage($chatId, $message,  'Markdown');\r\n} else {\r\n    Bot::sendMessage($chatId, \"\u274c Sorry, we couldn't retrieve your deposit history. Please try again later.\");\r\n}"
        },
        {
            "command": "\/withdraw",
            "answer": "Select a Method Below",
            "is_public": 0,
            "wait_for_answer": "on",
            "alias": "Withdraw",
            "help": null,
            "keyboards": "Bkash,Nagad,Rocket,Upay",
            "chat_type": "private",
            "placeholder": null,
            "code": "$active_status = $User->getProperty('active_status') ?? 0;\r\nif (!$active_status) {\r\n    $User->runCommand('\/start');\r\n}\r\n$methods = [\r\n    'Bkash', 'Nagad', 'Rocket', 'Upay'\r\n];\r\n\r\n\/\/ Validate that $message exists and is a string\r\nif (!isset($message) || !is_string($message) || !in_array($message, $methods)) {\r\n    Bot::sendMessage($chatId, \"\u274c Oops! That\u2019s not a valid payment method.\\n\\nPlease choose a valid method from the options below:\", 'Markdown');\r\n    $User->runCommand('\/withdraw');\r\n    return;\r\n}\r\n\r\n\/\/ Store the selected withdrawal method\r\n$User->setProperty('withdraw_method', $message);\r\n\/\/ Proceed to the next step: amount input\r\n$User->runCommand('withdraw-number-input');"
        },
        {
            "command": "withdraw-amount-input",
            "answer": "Enter Withdraw Amount",
            "is_public": 0,
            "wait_for_answer": "on",
            "alias": null,
            "help": null,
            "keyboards": "100,500,1000,5000",
            "chat_type": "private",
            "placeholder": null,
            "code": "$admin_chat_id = '6374191223';\r\n$active_status = $User->getProperty('active_status') ?? 0;\r\nif (!$active_status) {\r\n    $User->runCommand('\/start');\r\n}\r\n$withdraw_method = $User->getProperty('withdraw_method') ?? null;\r\n$withdraw_number = $User->getProperty('withdraw_number') ?? null;\r\n$currency = Bot::getProperty('currency') ?? \"BDT\";\r\n$minimum_withdraw = Bot::getProperty('minimum_withdraw') ?? 100;\r\n$balance = $User->getProperty('balance') ?? 0;\r\n$amount = $message;\r\nif (!is_numeric($amount) || $amount <= 0) {\r\n    if (isset($chatId) && $chatId) {\r\n        Bot::sendMessage($chatId, \"\u274c Please enter a valid amount greater than 0 $currency.\", 'Markdown');\r\n    }\r\n    $User->runCommand('withdraw-amount-input');\r\n    return;\r\n}\r\nif (!isset($withdraw_method)) {\r\n    if (isset($chatId) && $chatId) {\r\n        Bot::sendMessage($chatId, \"\u274c No withdrawal method selected. Please choose a method first.\", 'Markdown');\r\n    }\r\n    $User->runCommand('\/withdraw');\r\n    return;\r\n}\r\nif (!isset($withdraw_number)) {\r\n    if (isset($chatId) && $chatId) {\r\n        Bot::sendMessage($chatId, \"\u274c No withdrawal method selected. Please choose a method first.\", 'Markdown');\r\n    }\r\n    $User->runCommand('withdraw-number-input');\r\n    return;\r\n}\r\nif ($amount < $minimum_withdraw) {\r\n    if (isset($chatId) && $chatId) {\r\n        Bot::sendMessage($chatId, \"\u274c The minimum withdrawal amount is $minimum_withdraw $currency.\", 'Markdown');\r\n    }\r\n    $User->runCommand('withdraw-amount-input');\r\n    return;\r\n}\r\nif ($balance < $amount) {\r\n    if (isset($chatId) && $chatId) {\r\n        Bot::sendMessage($chatId, \"\u274c Insufficient balance. Your current balance is $balance $currency.\", 'Markdown');\r\n    }\r\n    return;\r\n}\r\n$User->setProperty('balance', $balance - $amount);\r\n$new_withdraw = [\r\n    'chat_id' => $chatId,\r\n    'amount' => $amount,\r\n    'number' => $withdraw_number,\r\n    'status' => 'Pending',\r\n    'method' => $withdraw_method,\r\n    'time' => now(),\r\n];\r\n$result = BotDB::append('withdraws', $new_withdraw);\r\nif (!$result['ok']) {\r\n    if (isset($chatId) && $chatId) {\r\n        Bot::sendMessage($chatId, \"\u274c Sorry, we couldn\u2019t process your withdrawal request. Please try again or contact support.\", 'Markdown');\r\n    }\r\n    return;\r\n}\r\nBot::sendMessage($chatId, \"\ud83c\udf89 Your withdrawal request has been submitted!\\n\\n**Details**:\\n- **Amount**: $amount $currency\\n- **Method**: $withdraw_method\\n- **Wallet**: $withdraw_number\\n- **Status**: Pending\\n\\nWe\u2019ll notify you once it\u2019s processed!\", 'Markdown');\r\nBot::sendMessage($admin_chat_id, \"\ud83d\udd14 New Withdrawal Request!\\n\\n**Details**:\\n- **User ID**: $chatId\\n- **Amount**: $amount $currency\\n- **Method**: $withdraw_method\\n- **Wallet**: $withdraw_number\\n- **Status**: Pending\\n\\nPlease review and process the request.\", 'Markdown');"
        },
        {
            "command": "#",
            "answer": null,
            "is_public": 0,
            "wait_for_answer": null,
            "alias": null,
            "help": null,
            "keyboards": null,
            "chat_type": null,
            "placeholder": null,
            "code": "if ($updateType == 'callback_query') {\r\n    if (isset($update['callback_query']) && !empty($update['callback_query']['data'])) {\r\n        $callback_data = $update['callback_query']['data'];\r\n        \/\/ $chatId = $update['callback_query']['from']['id'];\r\n        \/\/ $responses = [\r\n        \/\/     '\/home' => '\ud83c\udfe0 Welcome back to the Home menu! Use the buttons below to navigate.',\r\n        \/\/     '\/withdraw' => '\ud83d\udcb8 Ready to withdraw? Please select a withdrawal method.',\r\n        \/\/     '\/withdraw_history' => '\ud83d\udcdc Fetching your withdrawal history...',\r\n        \/\/     '\/refers' => '\ud83d\udc65 Here\u2019s the list of users you\u2019ve referred. Keep sharing!'\r\n        \/\/ ];\r\n        \/\/ $message = $responses[$callback_data] ?? '\u274c Unknown command. Please try again.';\r\n        \/\/ Bot::sendMessage($chatId, $message, 'Markdown');\r\n        $User->runCommand($callback_data);\r\n    } else {\r\n        Bot::sendMessage($chatId, '\u274c Invalid callback query. Please try again.', 'Markdown');\r\n    }\r\n}"
        },
        {
            "command": "\/withdraws",
            "answer": null,
            "is_public": 0,
            "wait_for_answer": null,
            "alias": null,
            "help": null,
            "keyboards": null,
            "chat_type": null,
            "placeholder": null,
            "code": "$active_status = $User->getProperty('active_status') ?? 0;\r\nif (!$active_status) {\r\n    $User->runCommand('\/start');\r\n}\r\n$result = BotDB::query(\r\n    'SELECT * FROM withdraws WHERE json_extract(data, \"$.chat_id\") = :user_id ORDER BY json_extract(data, \"$.time\") DESC',\r\n    [':user_id' => $chatId]\r\n);\r\n\r\n$currency = Bot::getProperty('currency') ?? 'BDT'; \r\n\r\nif ($result['ok']) {\r\n    $withdrawals = $result['data'];\r\n\r\n    if (empty($withdrawals)) {\r\n        Bot::sendMessage($chatId, \"\u274c You haven't made any withdrawal requests yet.\\n\\n\ud83d\udca1 Use \/withdraw to start a new withdrawal!\", 'Markdown');\r\n        return;\r\n    }\r\n\r\n    $message = \"\ud83d\udce4 *Your Withdrawal History:*\\n\\n\";\r\n\r\n    foreach ($withdrawals as $withdrawal) {\r\n        $data = json_decode($withdrawal['data'], true);\r\n\r\n        \/\/ Validate JSON decoding\r\n        if (!is_array($data)) {\r\n            $message .= \"\u26a0\ufe0f *Error:* Invalid withdrawal record\\n\";\r\n            $message .= \"------------------------\\n\";\r\n            continue;\r\n        }\r\n\r\n        $method = $data['method'] ?? 'Unknown';\r\n        $number = $data['number'] ?? 'Unknown';\r\n        $status = $data['status'] ?? 'Pending';\r\n        $amount = $data['amount'] ?? 0;\r\n        $time = $data['time'] ?? 'Unknown';\r\n\r\n        $message .= \"\ud83d\udcb3 *Method:* $method\\n\";\r\n        $message .= \"\ud83d\udcb0 *Amount:* $amount $currency\\n\";\r\n        $message .= \"\ud83d\udd39 *Wallet:* `$number`\\n\";\r\n        $message .= \"\ud83d\udccc *Status:* $status\\n\";\r\n        $message .= \"\ud83d\udd52 *Time:* $time\\n\";\r\n        $message .= \"------------------------\\n\";\r\n    }\r\n\r\n    Bot::sendMessage($chatId, $message, 'Markdown');\r\n} else {\r\n    Bot::sendMessage($chatId, \"\u274c Sorry, we couldn\u2019t retrieve your withdrawal history. Please try again later or contact support.\",  'Markdown');\r\n}"
        },
        {
            "command": "withdraw-number-input",
            "answer": "Enter Your Wallet Number \/ Adress",
            "is_public": 0,
            "wait_for_answer": "on",
            "alias": null,
            "help": null,
            "keyboards": null,
            "chat_type": null,
            "placeholder": null,
            "code": "$active_status = $User->getProperty('active_status') ?? 0;\r\nif (!$active_status) {\r\n    $User->runCommand('\/start');\r\n}\r\n$withdraw_method = $User->getProperty('withdraw_method') ?? null;\r\n\r\nif (!isset($withdraw_method) || !is_string($withdraw_method)) {\r\n    Bot::sendMessage($chatId, \"\u274c Oops! That\u2019s not a valid payment method.\\n\\nPlease choose a valid method from the options below:\", 'Markdown');\r\n    $User->runCommand('\/withdraw');\r\n    return;\r\n}\r\n\r\n\r\n$User->setProperty('withdraw_number', $message);\r\n\r\n$User->runCommand('withdraw-amount-input');"
        },
        {
            "command": "\/set_balance",
            "answer": "Please use: chat_id | amount (e.g., 123456 | 100)",
            "is_public": 0,
            "wait_for_answer": "on",
            "alias": null,
            "help": null,
            "keyboards": null,
            "chat_type": null,
            "placeholder": null,
            "code": "if ($chatId != '6374191223') {\r\n    Bot::sendMessage($chatId, \"Sorry, only admins can update balances. Please contact support if you need assistance.\");\r\n    return;\r\n}\r\n\r\nif (preg_match('\/^(\\d+)\\s*\\|\\s*(\\d+)$\/', trim($message), $matches)) {\r\n    $user_Id = $matches[1];\r\n    $amount = $matches[2];\r\n    $new_user = Bot::getUser($user_Id);\r\n    $balance = $new_user->getProperty('balance') ?? 0;\r\n    $balance += $amount;\r\n    $new_user->setProperty('balance', $balance);\r\n    Bot::sendMessage($user_Id, \"\ud83c\udf89 *Congratulations!* \ud83c\udf89\\n\\nYou\u2019ve just received *$amount* \ud83d\udcb0 to your balance!\\n\\nYour new balance is *$balance* \ud83d\udcb8\ud83c\udf89\\n\\nKeep up the great work! \ud83d\ude0a\", 'Markdown');\r\n    Bot::sendMessage($chatId, \"\ud83c\udf89 Success! The balance for user $user_Id has been updated to $balance.\");\r\n} else {\r\n    Bot::sendMessage($chatId, \"\u26a0\ufe0f Invalid format. Please use: chat_id | amount (e.g., 123456 | 100)\");\r\n}"
        }
    ]
}